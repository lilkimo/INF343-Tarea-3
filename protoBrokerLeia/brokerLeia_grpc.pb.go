// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoBrokerLeia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnToBrokerFromLeiaClient is the client API for ConnToBrokerFromLeia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnToBrokerFromLeiaClient interface {
	GetNumberRebelds(ctx context.Context, in *MensajeToBrokerFromLeia, opts ...grpc.CallOption) (*RespuestaLeia, error)
}

type connToBrokerFromLeiaClient struct {
	cc grpc.ClientConnInterface
}

func NewConnToBrokerFromLeiaClient(cc grpc.ClientConnInterface) ConnToBrokerFromLeiaClient {
	return &connToBrokerFromLeiaClient{cc}
}

func (c *connToBrokerFromLeiaClient) GetNumberRebelds(ctx context.Context, in *MensajeToBrokerFromLeia, opts ...grpc.CallOption) (*RespuestaLeia, error) {
	out := new(RespuestaLeia)
	err := c.cc.Invoke(ctx, "/grpc.ConnToBrokerFromLeia/GetNumberRebelds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnToBrokerFromLeiaServer is the server API for ConnToBrokerFromLeia service.
// All implementations must embed UnimplementedConnToBrokerFromLeiaServer
// for forward compatibility
type ConnToBrokerFromLeiaServer interface {
	GetNumberRebelds(context.Context, *MensajeToBrokerFromLeia) (*RespuestaLeia, error)
	mustEmbedUnimplementedConnToBrokerFromLeiaServer()
}

// UnimplementedConnToBrokerFromLeiaServer must be embedded to have forward compatible implementations.
type UnimplementedConnToBrokerFromLeiaServer struct {
}

func (UnimplementedConnToBrokerFromLeiaServer) GetNumberRebelds(context.Context, *MensajeToBrokerFromLeia) (*RespuestaLeia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumberRebelds not implemented")
}
func (UnimplementedConnToBrokerFromLeiaServer) mustEmbedUnimplementedConnToBrokerFromLeiaServer() {}

// UnsafeConnToBrokerFromLeiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnToBrokerFromLeiaServer will
// result in compilation errors.
type UnsafeConnToBrokerFromLeiaServer interface {
	mustEmbedUnimplementedConnToBrokerFromLeiaServer()
}

func RegisterConnToBrokerFromLeiaServer(s grpc.ServiceRegistrar, srv ConnToBrokerFromLeiaServer) {
	s.RegisterService(&ConnToBrokerFromLeia_ServiceDesc, srv)
}

func _ConnToBrokerFromLeia_GetNumberRebelds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeToBrokerFromLeia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnToBrokerFromLeiaServer).GetNumberRebelds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnToBrokerFromLeia/GetNumberRebelds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnToBrokerFromLeiaServer).GetNumberRebelds(ctx, req.(*MensajeToBrokerFromLeia))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnToBrokerFromLeia_ServiceDesc is the grpc.ServiceDesc for ConnToBrokerFromLeia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnToBrokerFromLeia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ConnToBrokerFromLeia",
	HandlerType: (*ConnToBrokerFromLeiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumberRebelds",
			Handler:    _ConnToBrokerFromLeia_GetNumberRebelds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brokerLeia.proto",
}
