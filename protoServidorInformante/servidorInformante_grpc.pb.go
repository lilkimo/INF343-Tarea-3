// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protoServidorInformantes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnToServidorFromInformanteClient is the client API for ConnToServidorFromInformante service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnToServidorFromInformanteClient interface {
	UpdateName(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error)
	UpdateNumber(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error)
	AddCity(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error)
	DeleteCity(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error)
}

type connToServidorFromInformanteClient struct {
	cc grpc.ClientConnInterface
}

func NewConnToServidorFromInformanteClient(cc grpc.ClientConnInterface) ConnToServidorFromInformanteClient {
	return &connToServidorFromInformanteClient{cc}
}

func (c *connToServidorFromInformanteClient) UpdateName(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/grpc.ConnToServidorFromInformante/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connToServidorFromInformanteClient) UpdateNumber(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/grpc.ConnToServidorFromInformante/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connToServidorFromInformanteClient) AddCity(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/grpc.ConnToServidorFromInformante/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connToServidorFromInformanteClient) DeleteCity(ctx context.Context, in *MensajeToServidor, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/grpc.ConnToServidorFromInformante/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnToServidorFromInformanteServer is the server API for ConnToServidorFromInformante service.
// All implementations must embed UnimplementedConnToServidorFromInformanteServer
// for forward compatibility
type ConnToServidorFromInformanteServer interface {
	UpdateName(context.Context, *MensajeToServidor) (*Respuesta, error)
	UpdateNumber(context.Context, *MensajeToServidor) (*Respuesta, error)
	AddCity(context.Context, *MensajeToServidor) (*Respuesta, error)
	DeleteCity(context.Context, *MensajeToServidor) (*Respuesta, error)
	mustEmbedUnimplementedConnToServidorFromInformanteServer()
}

// UnimplementedConnToServidorFromInformanteServer must be embedded to have forward compatible implementations.
type UnimplementedConnToServidorFromInformanteServer struct {
}

func (UnimplementedConnToServidorFromInformanteServer) UpdateName(context.Context, *MensajeToServidor) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedConnToServidorFromInformanteServer) UpdateNumber(context.Context, *MensajeToServidor) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedConnToServidorFromInformanteServer) AddCity(context.Context, *MensajeToServidor) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedConnToServidorFromInformanteServer) DeleteCity(context.Context, *MensajeToServidor) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedConnToServidorFromInformanteServer) mustEmbedUnimplementedConnToServidorFromInformanteServer() {
}

// UnsafeConnToServidorFromInformanteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnToServidorFromInformanteServer will
// result in compilation errors.
type UnsafeConnToServidorFromInformanteServer interface {
	mustEmbedUnimplementedConnToServidorFromInformanteServer()
}

func RegisterConnToServidorFromInformanteServer(s grpc.ServiceRegistrar, srv ConnToServidorFromInformanteServer) {
	s.RegisterService(&ConnToServidorFromInformante_ServiceDesc, srv)
}

func _ConnToServidorFromInformante_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeToServidor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnToServidorFromInformanteServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnToServidorFromInformante/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnToServidorFromInformanteServer).UpdateName(ctx, req.(*MensajeToServidor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnToServidorFromInformante_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeToServidor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnToServidorFromInformanteServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnToServidorFromInformante/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnToServidorFromInformanteServer).UpdateNumber(ctx, req.(*MensajeToServidor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnToServidorFromInformante_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeToServidor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnToServidorFromInformanteServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnToServidorFromInformante/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnToServidorFromInformanteServer).AddCity(ctx, req.(*MensajeToServidor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnToServidorFromInformante_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MensajeToServidor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnToServidorFromInformanteServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ConnToServidorFromInformante/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnToServidorFromInformanteServer).DeleteCity(ctx, req.(*MensajeToServidor))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnToServidorFromInformante_ServiceDesc is the grpc.ServiceDesc for ConnToServidorFromInformante service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnToServidorFromInformante_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ConnToServidorFromInformante",
	HandlerType: (*ConnToServidorFromInformanteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateName",
			Handler:    _ConnToServidorFromInformante_UpdateName_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _ConnToServidorFromInformante_UpdateNumber_Handler,
		},
		{
			MethodName: "AddCity",
			Handler:    _ConnToServidorFromInformante_AddCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _ConnToServidorFromInformante_DeleteCity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servidorInformante.proto",
}
